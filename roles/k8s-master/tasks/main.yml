---
# - name: Include a pre-installaion check
#   include: pre-install.yaml

- name: Create all required folders
  file: 
   path: "{{ item }}"
   state: directory
  with_items: 
   - "{{ etcd_cert_dir }}"
   - "/root/.kube/"

- name: Create kubeadm cluster config
  template:
    src: "kubeadm-master.j2"
    dest: "/etc/kubernetes/kubeadm-master.yml"


- name: Check if old apiserver cert exists on first control plane
  stat:
    path: "{{ k8scfg }}/pki/front-proxy-ca.key"
  register: old_frontproxy_cert
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true

- name: Check if other control plane already join the master
  stat:
    path: "{{ k8scfg }}/manifests/kube-apiserver.yaml"
  register: apiserver_yaml

- name: Run kubeadm init on first master
  command: kubeadm init --config {{ k8scfg }}/kubeadm-master.yml
  when: >
        inventory_hostname == groups['master'][0]
        and old_frontproxy_cert.stat.exists == False
  ignore_errors: yes 

- name: Copy admin.conf to .kube/config
  copy:
    src: "{{ k8scfg }}/admin.conf"
    dest: /root/.kube/config
    remote_src: yes
  when: >
        inventory_hostname == groups['master'][0]

####Copy required files to other control plane nodes
- name: slurp kubeadm_certs certs
  slurp: src={{ item }}
  with_items:
    - "{{ kube_cert_dir }}/ca.crt"
    - "{{ kube_cert_dir }}/ca.key"
    - "{{ kube_cert_dir }}/sa.key"
    - "{{ kube_cert_dir }}/sa.pub"
    - "{{ kube_cert_dir }}/front-proxy-ca.crt"
    - "{{ kube_cert_dir }}/front-proxy-ca.key"
    - "{{ etcd_cert_dir }}/ca.crt"
    - "{{ etcd_cert_dir }}/ca.key"
    - "{{ k8scfg }}/admin.conf"
  register: kubeadm_certs
  run_once: true
  when: >
        inventory_hostname == groups['master'][0]

- name: write out kubeadm certs
  copy:
    dest: "{{ item.item }}"
    content: "{{ item.content | b64decode }}"
    owner: root
    group: root
    mode: 0700
  with_items: "{{ kubeadm_certs.results }}"
  when: >
        inventory_hostname != groups['master'][0]
####Copy required files to other control plane nodes
#######install calico#############################
- name: Create calico network manifest
  template:
    src: "calico.j2"
    dest: "{{ k8scfg }}/calico.yml"
  when: >
        inventory_hostname == groups['master'][0]

- name: Create update_calico script for replacing cert
  template:
    src: "update_calico.j2"
    dest: "/tmp/update_calico.sh"
  when: >
        inventory_hostname == groups['master'][0]

- name: Start calico netowrk installaion
  command: "{{ item }}"
  with_items:
    - sh /tmp/update_calico.sh
  when: >
        inventory_hostname == groups['master'][0]


- pause: seconds=40

- name: Calculate kubeadm CA cert hash
  shell: openssl x509 -pubkey -in {{ kube_cert_dir }}/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
  register: kubeadm_ca_hash
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true

- name: Create kubeadm token for joining nodes with 24h expiration (default)
  command: "kubeadm token create --ttl 0"
  run_once: true
  register: temp_token
  delegate_to: "{{ groups['master'][0] }}"

- name: Join to cluster if needed
  command: >-
    kubeadm join {{ load_balancer_dns }}:{{ glusterfs_load_balancer_port }}
    --token {{ temp_token.stdout }} --discovery-token-ca-cert-hash sha256:{{ kubeadm_ca_hash.stdout }} --experimental-control-plane
  when: > 
        inventory_hostname != groups['master'][0]
        and apiserver_yaml.stat.exists == False

# - name: Install wget
#   command: "{{ item }}"
#   with_items:
#     - yum install wget -y
#     - wget "{{ heketi_binary }}"
#     - tar xzvf "{{ heketi_zip }}"
#     - cp heketi-client/bin/heketi-cli /usr/sbin/
#   when: >
#       inventory_hostname == groups['master'][0]

